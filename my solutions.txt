1. select distinct customer_city from customers
order by 1


2. 
select count(*) from orders
where extract(year from order_purchase_timestamp::date)=2017


3. 	
select pr."product category", round(sum(p.payment_value))	as total_payment
 from payments p
join order_items o on o.order_id=p.order_id
join products pr on o.product_id=pr.product_id
group by 1
order by 2 desc

4.Calculate the number of orders per month in 2018. 

select extract (month from order_purchase_timestamp::date) as months, count(order_id)
from orders
where extract(year from order_purchase_timestamp::date)=2018
group by 1
limit 12

5. Find the average number of products per order, grouped by customer city.
with cte as(
select o.order_id, o.customer_id,count(ot.order_id) as cnt from orders o 
join order_items ot on o.order_id=ot.order_id
join customers c on c.customer_id=o.customer_id
group by 1,2	)

select c.customer_city, round(avg(cnt),2) as average_orders
from cte
join customers c on c.customer_id=cte.customer_id
group by 1
order by 2 desc


6. Calculate the percentage of total revenue contributed by each product category.

with cte1 as(
select p."product category", sum(ot.price) as contri
from products p
join order_items ot on p.product_id=ot.product_id
group by 1
order by 2 desc
),
cte2 as (
select sum(contri) as total_sales
from cte1)

select "product category", round(cast((contri / total_sales * 100) AS numeric), 2) AS perc_contribution
from cte1,cte2


7. Identify the correlation between product price and the number of times a product has been purchased.

select p."product category", count(ot.product_id), round(cast(avg(ot.price)as numeric),2) as avg_price
from products p
join order_items ot on ot.product_id=p.product_id 
where p."product category" is not null
group by 1
order by 2 desc


8. Calculate the total revenue generated by each seller, and rank them by revenue.

with cte as(
select ot.seller_id, round(cast(sum(p.payment_value)as numeric),2) as revenue
from payments p
join order_items ot on p.order_id=ot.order_id
group by 1
order by 2 desc
)
select seller_id , revenue,
dense_rank() over(order by revenue desc) as rank
from cte


9. Calculate the moving average of order values for each customer over their order history.


with cte as(
select o.customer_id,o.order_purchase_timestamp as OPT, p.payment_value as payment
from payments p 
join orders o on o.order_id=p.order_id
)
select customer_id, OPT, payment,
avg(payment) over(partition by customer_id order by OPT rows between 2 preceding and current row) as mov_avg
from cte	


10. Calculate the cumulative sales per month for each year.

with cte as(
select extract(year from o.order_purchase_timestamp::date) as year,
extract(month from o.order_purchase_timestamp::date) as month,
round(cast(sum(p.payment_value)as numeric),2) as payment
from orders o
join payments p on p.order_id=o.order_id
group by 1,2)

select year,month, payment,
sum(payment) over(order by year,month)as cumalative_payment
from cte


11. Calculate the year-over-year growth rate of total sales.

with cte as(
select extract(year from o.order_purchase_timestamp::date ) as year, 
round(cast(sum(p.payment_value)as numeric),2) as total_payment
from payments p
join orders o on p.order_id=o.order_id
group by 1)

select year, previous_year, total_payment, 
round(cast(((total_payment-previous_year)/previous_year*100)as numeric),2) as growth_rate
from(
select year,
lag (total_payment, 1) over(order by year) as previous_year,
total_payment
from cte)


12.Calculate the retention rate of customers, defined as the percentage of customers who make another purchase within 6 months of their first purchase.
none


13. Identify the top 3 customers who spent the most money in each year.

with cte as(
select o.customer_id, sum(p.payment_value), extract(year from o.order_purchase_timestamp::date) as date,
rank() over(partition by extract(year from o.order_purchase_timestamp::date) order by sum(p.payment_value) desc ) as rnk
from payments p
join orders o on p.order_id=o.order_id
group by 1,3
)

select *
from cte
where rnk<4

